theme_economist() +
theme(axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title = element_text(size = 18, face = 'bold',   margin = margin(t = 20, r = 20)),
legend.position = 'top',
legend.text = element_text(size = 14))
ggplot(data = pib_2007, aes(x = gdpPercap)) +
geom_histogram() +
labs(x = 'PIB per capita (€)', y = 'Frecuencia') +
theme_economist()+
theme(axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title = element_text(size = 18, face = 'bold',   margin = margin(t = 20, r = 20)),
legend.position = 'top',
legend.text = element_text(size = 14))
ggplot(data = pib_2007, aes (x = gdpPercap, fill = continent)) +
geom_histogram(color = 'white') + # así indicamos que el borde es blanco
facet_wrap(~continent, ncol = 1, scales = 'free_y') + # con free_y dejamos que la escala del eje Y varíe entre histogramas, si no lo indicamos la escala de todos los ejes Y de los 5 histogramas será la misma
labs(x = 'PIB per capita ($)', y = 'Frecuencia')+
theme_economist()+
theme(axis.text = element_text(size = 14),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title = element_text(size = 14, face = 'bold',  margin = margin(t = 20, r = 20)),
legend.position = 'none',
legend.text = element_text(size = 14))
colnames(datos_brutos) # con nombre de columnas (colnames)
ggplot(data = datos_oceania, aes(x = year, y = gdpPercap, color = country))+
geom_line()+
labs(x = 'PIB per capita ($)', y = 'Expectativa de vida (años)')+
theme_economist()+
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)))
datos_oceania <- datos_brutos %>%
filter(continent == 'Oceania')
ggplot(data = datos_oceania, aes(x = year, y = gdpPercap, color = country))+
geom_line()+
labs(x = 'PIB per capita ($)', y = 'Expectativa de vida (años)')+
theme_economist()+
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)))
ggsave(filename = 'pib-vida-oceania.pdf', plot = pib_vida_oceania, device = 'pdf', units = 'cm', width = 15, height = 12)
pib_vida_oceania <- ggplot(data = datos_oceania, aes(x = year, y = gdpPercap, color = country))+
geom_line()+
labs(x = 'PIB per capita ($)', y = 'Expectativa de vida (años)')+
theme_economist()+
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)))
ggsave(filename = 'pib-vida-oceania.pdf', plot = pib_vida_oceania, device = 'pdf', units = 'cm', width = 15, height = 12)
# Guardamos el grafico
pib_vida_oceania <- ggplot(data = datos_oceania, aes(x = year, y = gdpPercap, color = country))+
geom_line()+
labs(x = 'Año', y = 'PIB per capita ($)')+
theme_economist()+
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)))
#
ggsave(filename = 'pib-vida-oceania.pdf', plot = pib_vida_oceania, device = 'pdf', units = 'cm', width = 15, height = 12)
# Obtenemos los datos
datos_brutos <- gapminder::gapminder
datos_tarea_4_2 <- datos_brutos %>% filter(country == ‘China’ | country == ‘India’ | country == ‘Japan’)
datos_tarea_4_2 <- datos_brutos %>% filter(country == "China" | country == "India" | country == "Japan")
datos_tarea_3_2 <- datos_brutos %>% filter(country == "China" | country == "India" | country == "Japan")
ggplot(data = datos_tarea_3_2, aes(x = year, y = gdpPercap, color = country))+
geom_line() +
geom_point() +
facet_wrap(facets = ~ country, ncol = 4) + # modificamos el número de columnas
labs(x = 'Año', y = 'PIB per capita ($)') +
theme_economist()+
theme(axis.text = element_text(size = 10), # modificando el tamaño de letra
axis.text.x = element_text(angle = 45), # angulos de las etiquetas del eje x
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)),
strip.text = element_text(size = 9),
legend.position = 'none') +
scale_y_continuous(labels = function(x) format(x, big.mark = ".", scientific = FALSE))
ggplot(data = datos_tarea_3_2, aes(x = year, y = gdpPercap, color = country))+
geom_line() +
geom_point() +
facet_wrap(facets = ~ country, ncol = 4) + # modificamos el número de columnas
labs(x = 'Año', y = 'PIB per capita ($)') +
theme_economist()+
theme(axis.text = element_text(size = 10), # modificando el tamaño de letra
axis.text.x = element_text(angle = 45), # angulos de las etiquetas del eje x
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)),
strip.text = element_text(size = 9),
legend.position = 'none') +
scale_y_continuous(labels = function(x) format(x, big.mark = ".", scientific = FALSE))
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-2.R", encoding = 'UTF-8')
# Obtenemos los datos
datos_brutos <- gapminder::gapminder
datos_tarea_3_2 <- datos_brutos %>% filter(country == "China" | country == "India" | country == "Japan")
datos_tarea_3_2 <- datos_brutos % > % filter(country == "China" | country == "India" | country == "Japan")
datos_tarea_3_2 <- datos_brutos %>% filter(country == "China" | country == "India" | country == "Japan")
# Obtenemos los datos
datos_brutos <- gapminder::gapminder
datos_tarea_3_2 <- datos_brutos %>% filter(country == "China" | country == "India" | country == "Japan")
# Load packages
library(tidyverse)
library(gapminder) # este paquete contiene los datos que vamos a emplear
library(ggthemes) # este paquete tiene temas gráficos (plantillas)
library(ggrepel) # este paquete evita que las etiquetas se superpongan en los gráficos
# Obtenemos los datos
datos_brutos <- gapminder::gapminder
datos_tarea_3_2 <- datos_brutos %>% filter(country == "China" | country == "India" | country == "Japan")
ggplot(data = datos_tarea_3_2, aes(x = year, y = gdpPercap, color = country))+
geom_line() +
geom_point() +
facet_wrap(facets = ~ country, ncol = 4) + # modificamos el número de columnas
labs(x = 'Año', y = 'PIB per capita ($)') +
theme_economist()+
theme(axis.text = element_text(size = 10), # modificando el tamaño de letra
axis.text.x = element_text(angle = 45), # angulos de las etiquetas del eje x
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)),
strip.text = element_text(size = 9),
legend.position = 'none') +
scale_y_continuous(labels = function(x) format(x, big.mark = ".", scientific = FALSE))
ggplot(data = datos_tarea_3_2, aes(x = year, y = gdpPercap, color = country))+
geom_line() +
geom_point() +
facet_wrap(facets = ~ country, ncol = 4) + # modificamos el número de columnas
labs(x = 'Año', y = 'PIB per capita ($)') +
theme_economist()+
theme(axis.text = element_text(size = 10), # modificando el tamaño de letra
axis.text.x = element_text(angle = 45), # angulos de las etiquetas del eje x
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)),
strip.text = element_text(size = 9),
legend.position = 'none') +
scale_x_continuous(labels = function(x) format(x, big.mark = ".", scientific = FALSE))
ggplot(data = datos_tarea_3_2, aes(x = year, y = gdpPercap, color = country))+
geom_line() +
geom_point() +
facet_wrap(facets = ~ country, ncol = 1) + # modificamos el número de columnas
labs(x = 'Año', y = 'PIB per capita ($)') +
theme_economist()+
theme(axis.text = element_text(size = 10), # modificando el tamaño de letra
axis.text.x = element_text(angle = 45), # angulos de las etiquetas del eje x
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)),
strip.text = element_text(size = 9),
legend.position = 'none') +
scale_y_continuous(labels = function(x) format(x, big.mark = ".", scientific = FALSE))
# Generamos el grafico
pib_vida_china_india_japan <-ggplot(data = datos_tarea_3_2, aes(x = year, y = gdpPercap, color = country))+
geom_line() +
geom_point() +
facet_wrap(facets = ~ country, ncol = 1) + # modificamos el número de columnas
labs(x = 'Año', y = 'PIB per capita ($)') +
theme_economist()+
theme(axis.text = element_text(size = 10), # modificando el tamaño de letra
axis.text.x = element_text(angle = 45), # angulos de las etiquetas del eje x
axis.title = element_text(size = 14, face = 'bold', margin = margin(t = 20, r = 20)),
strip.text = element_text(size = 9),
legend.position = 'none') +
scale_y_continuous(labels = function(x) format(x, big.mark = ".", scientific = FALSE))
ggsave(filename = 'pib-vida-asian-top', plot = pib_vida_china_india_japan, device = 'pdf', units = 'cm', width = 15, height = 12)
ggsave(filename = 'pib-vida-asian-top.pdf', plot = pib_vida_china_india_japan, device = 'pdf', units = 'cm', width = 15, height = 12)
# Load packages
library(tidyverse)
library(gapminder) # este paquete contiene los datos que vamos a emplear
library(ggthemes) # este paquete tiene temas gráficos (plantillas)
library(ggrepel) # este paquete evita que las etiquetas se superpongan en los gráficos
datos_brutos <- gapminder_unfiltered # son todos los datos del paquete gapminder sin filtrar
dim(datos_brutos)
# ejemplo de filter:
pib_capita_continente_2007 <- datos_brutos %>%
filter(year == 2007) # asi se seleccionan todos los datos de datos_brutos cuyo año es 2007 y se introducen en el objeto pib_capita_continente_2007
head(pib_capita_continente_2007)
head(pib_capita_continente_2007)
head(pib_capita_continente_2007)
# se agrupa por continente y se obtiene el número de observaciones de cada grupo, la suma del PIB, la suma de la población y el PIB per capita para cada continente
pib_capita_continente_2007 <- datos_brutos %>%
filter(year == 2007) %>%
mutate(PIB = gdpPercap * pop) %>%
group_by(continent) %>%
summarise(n = n(), PIB = sum(PIB) , poblacion = sum(as.numeric(pop)), PIB_capita = PIB/poblacion)
head(pib_capita_continente_2007)
head(pib_capita_continente_2007)
head(pib_capita_continente_2007)
head(pib_capita_continente_2007)
install.packages("string")
head(datos_inflacion)
library(stringr) # paquete para extraer caracteres
direccion_internet_ipc <- 'https://www.bde.es/webbde/es/estadis/infoest/series/be2623.csv'
datos_inflacion <- read.csv(file = direccion_internet_ipc)
head(datos_inflacion)
View(datos_inflacion)
# si consultamos la parte final del objeto:
tail(datos_inflacion)
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_') # leemos el csv de la dirección de internet, sin considerar cabecera, evitando las 6 primeras filas, y cuando aparezca el guion bajo se considerará NA, no disponible (Not Available)
head(datos_inflacion)
tail(datos_inflacion)
colnames(datos_inflacion)
dim(datos_inflacion)
class(datos_inflacion)
# si usamos la función tail
tail(inflacion_ESP) # para inspeccionar las últimas 6 filas
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
class(datos_inflacion$V1) # comprobamos que ya es caracter
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
# si usamos la función tail
tail(inflacion_ESP) # para inspeccionar las últimas 6 filas
# generamos un nuevo objeto, vector, con los meses con punto, usando la función paste0, que se emplea para pegar sin espacios
meses_con_punto <- paste0(meses, '.')
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
# si usamos la función tail
tail(inflacion_ESP) # para inspeccionar las últimas 6 filas
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
# si usamos la función tail
tail(inflacion_ESP) # para inspeccionar las últimas 6 filas
class(inflacion_ESP$IPC_UE)
class(inflacion_ESP$IPC)
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC)) +
geom_line()
inflacion_ESP$IPC_UE <- as.numeric(inflacion_ESP$IPC_UE)
inflacion_ESP$IPC <- as.numeric(inflacion_ESP$IPC)
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC)) +
geom_line()
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC, group = 1)) +
geom_line()
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC, group = 1)) +
geom_line()
class(inflacion_ESP$IPC)
inflacion_ESP$IPC_UE <- as.numeric(inflacion_ESP$IPC_UE)
inflacion_ESP$IPC <- as.numeric(inflacion_ESP$IPC)
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC, group = 1)) +
geom_line()
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC, group = 1)) +geom_line()
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
# si usamos la función tail
tail(inflacion_ESP) # para inspeccionar las últimas 6 filas
class(inflacion_ESP$IPC_UE)
class(inflacion_ESP$IPC)
inflacion_ESP$IPC_UE <- as.numeric(inflacion_ESP$IPC_UE)
inflacion_ESP$IPC <- as.numeric(inflacion_ESP$IPC)
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC, group = 1)) +geom_line()
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC)) +geom_line()
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC)) +
geom_line() +
theme_economist() +
labs (x = 'Fecha', y = 'IPC interanual')+
scale_x_date(limits = c(as.Date('1996/1/1'), NA), date_breaks = "5 years", date_labels = '%b %Y')+ # modifica la escala del eje x (es una variable fecha) # usa intervalos de 5 años y las etiquetas tendrán el formato de mes (en letra %b) y año largo (4 cifras %Y)
theme(
axis.text.x = element_text(angle = 45, vjust = 0.3, size = 10),
axis.title = element_text(size = 14, face = 'bold'),
axis.title.x = element_text(vjust = -3) # vjust regula la posicion vertical del titulo, en ese caso del eje x
)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC)) +
geom_line()
inflacion_ESP$IPC_UE <- as.numeric(inflacion_ESP$IPC_UE)
inflacion_ESP$IPC <- as.numeric(inflacion_ESP$IPC)
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC)) +
geom_line()
ggplot(data = inflacion_ESP, aes(x = Fecha, y = IPC)) +
geom_line() +
theme_economist() +
labs (x = 'Fecha', y = 'IPC interanual')+
scale_x_date(limits = c(as.Date('1996/1/1'), NA), date_breaks = "5 years", date_labels = '%b %Y')+ # modifica la escala del eje x (es una variable fecha) # usa intervalos de 5 años y las etiquetas tendrán el formato de mes (en letra %b) y año largo (4 cifras %Y)
theme(
axis.text.x = element_text(angle = 45, vjust = 0.3, size = 10),
axis.title = element_text(size = 14, face = 'bold'),
axis.title.x = element_text(vjust = -3) # vjust regula la posicion vertical del titulo, en ese caso del eje x
)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
# Y con la función unique() evitamos las repecitiones, así tenemos un vector con los meses
# tal y como están nombrados en el INE
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
class(datos_inflacion$V1) # comprobamos que ya es caracter
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP) # para inspeccionar las primeras 6 filas
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8', echo=TRUE)
View(datos_inflacion)
# si consultamos la parte final del objeto:
tail(datos_inflacion)
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_') # leemos el csv de la dirección de internet, sin considerar cabecera, evitando las 6 primeras filas, y cuando aparezca el guion bajo se considerará NA, no disponible (Not Available)
head(datos_inflacion)
tail(datos_inflacion)
num_filas <- nrow(datos_inflacion) # asi podemos ver el numero de filas que tiene el dataframe
datos_inflacion <- datos_inflacion[1: (num_filas -2), ] #así estamos cogiendo todas la filas menos las dos últimas y todas las columnas. Es notación matricial que sigue el formato OBJETO[filas, columnas]. Al dejar vacío tras la coma, quiere decir que se cogen todas las columnas
colnames(datos_inflacion)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8', echo=TRUE)
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
class(datos_inflacion$V1) # comprobamos que ya es caracter
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8', echo=TRUE)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8', echo=TRUE)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8', echo=TRUE)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8', echo=TRUE)
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP)
# si consultamos la parte final del objeto:
tail(datos_inflacion)
library(stringr) # paquete para extraer caracteres
direccion_internet_ipc <- 'https://www.bde.es/webbde/es/estadis/infoest/series/be2623.csv'
datos_inflacion <- read.csv(file = direccion_internet_ipc)
head(datos_inflacion)
# si consultamos la parte final del objeto:
tail(datos_inflacion)
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_') # leemos el csv de la dirección de internet, sin considerar cabecera, evitando las 6 primeras filas, y cuando aparezca el guion bajo se considerará NA, no disponible (Not Available)
direccion_internet_ipc <- 'https://www.bde.es/webbde/es/estadis/infoest/series/be2623.csv'
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_') # leemos el csv de la dirección de internet, sin considerar cabecera, evitando las 6 primeras filas, y cuando aparezca el guion bajo se considerará NA, no disponible (Not Available)
num_filas <- nrow(datos_inflacion) # asi podemos ver el numero de filas que tiene el dataframe
datos_inflacion <- datos_inflacion[1: (num_filas -2), ] #así estamos cogiendo todas la filas menos las dos últimas y todas las columnas. Es notación matricial que sigue el formato OBJETO[filas, columnas]. Al dejar vacío tras la coma, quiere decir que se cogen todas las columnas
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8', echo=TRUE)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
library(stringr) # paquete para extraer caracteres
direccion_internet_ipc <- 'https://www.bde.es/webbde/es/estadis/infoest/series/be2623.csv'
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_') # leemos el csv de la dirección de internet, sin considerar cabecera, evitando las 6 primeras filas, y cuando aparezca el guion bajo se considerará NA, no disponible (Not Available)
num_filas <- nrow(datos_inflacion) # asi podemos ver el numero de filas que tiene el dataframe
datos_inflacion <- datos_inflacion[1: (num_filas -2), ] #así estamos cogiendo todas la filas menos las dos últimas y todas las columnas. Es notación matricial que sigue el formato OBJETO[filas, columnas]. Al dejar vacío tras la coma, quiere decir que se cogen todas las columnas
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y') # le estamos indicando que queremos que la variable V1 sea de tipo fecha y que está en formato día %d, mes abreviado %b y años con las cuatro cifras %Y
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1) # le pegamos el día 01, primer día del mes
head(datos_inflacion)
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
head(inflacion_ESP)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(gapminder) # este paquete contiene los datos que vamos a emplear
install.packages("gapminder")
install.packages("gapminder")
library(tidyverse)
library(gapminder) # este paquete contiene los datos que vamos a emplear
library(ggthemes) # este paquete tiene temas gráficos (plantillas)
library(ggrepel) # este paquete evita que las etiquetas se superpongan en los gráficos
install.packages("ggrepel")
install.packages("string")
library(tidyverse) # Instalacion de tidyverse
library(gapminder) # este paquete contiene los datos que vamos a emplear
library(ggthemes) # este paquete tiene temas gráficos (plantillas)
library(ggrepel) # este paquete evita que las etiquetas se superpongan en los gráficos
library(stringr) # paquete para extraer caracteres
direccion_internet_ipc <- 'https://www.bde.es/webbde/es/estadis/infoest/series/be2623.csv'
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_') # leemos el csv de la dirección de internet, sin considerar cabecera, evitando las 6 primeras filas, y cuando aparezca el guion bajo se considerará NA, no disponible (Not Available)
num_filas <- nrow(datos_inflacion) # asi podemos ver el numero de filas que tiene el dataframe
datos_inflacion <- datos_inflacion[1: (num_filas -2), ] #así estamos cogiendo todas la filas menos las dos últimas y todas las columnas. Es notación matricial que sigue el formato OBJETO[filas, columnas]. Al dejar vacío tras la coma, quiere decir que se cogen todas las columnas
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
datos_inflacion$V10
head(datos_inflacion)
r
tail(datos_inflacion)
tail(datos_inflacion)
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_') # leemos el csv de la dirección de internet, sin considerar cabecera, evitando las 6 primeras filas, y cuando aparezca el guion bajo se considerará NA, no disponible (Not Available)
tail(datos_inflacion)
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_')
datos_inflacion <- datos_inflacion[1: (num_filas -2), ]
colnames(datos_inflacion)
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
class(datos_inflacion$V1)
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
library(tidyverse) # Instalacion de tidyverse
library(gapminder) # este paquete contiene los datos que vamos a emplear
library(ggthemes) # este paquete tiene temas gráficos (plantillas)
library(ggrepel) # este paquete evita que las etiquetas se superpongan en los gráficos
library(stringr) # paquete para extraer caracteres
direccion_internet_ipc <- 'https://www.bde.es/webbde/es/estadis/infoest/series/be2623.csv'
datos_inflacion <- read.csv(file = direccion_internet_ipc, header = FALSE, skip = 6, na.strings = '_')
datos_inflacion <- datos_inflacion[1: (num_filas -2), ]
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
num_filas <- nrow(datos_inflacion)
datos_inflacion <- datos_inflacion[1: (num_filas -2), ]
datos_inflacion$V1 <- as.character(datos_inflacion$V1)
meses <- unique(str_sub(datos_inflacion$V1, start = 1, end = 3))
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
meses_con_punto <- paste0(meses, '.')
datos_inflacion$V1 <- str_replace_all(string = datos_inflacion$V1,
pattern = meses,
replacement = meses_con_punto)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8')
print(meses_con_punto)
print(meses)
print(datos_inflacion$V1)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8')
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8')
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8')
head(datos_inflacion)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y'
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y')
datos_inflacion$V1 <- paste0('01 ',datos_inflacion$V1)
datos_inflacion$V1 <- as.Date(datos_inflacion$V1, '%d %b %Y')
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
renaame(Fecha = V1, IPC_UE = V3,  IPC = V4)
inflacion_ESP <- datos_inflacion %>%
select(V1, V3, V4) %>%
rename(Fecha = V1, IPC_UE = V3,  IPC = V4)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8')
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8')
head(datos_inflacion)
source("~/GitHub/aberlanas/R-Learning/Tema03-REconomia/REconomia/Tema03-Ejer3-3.R", encoding = 'UTF-8')
head(datos_inflacion)
